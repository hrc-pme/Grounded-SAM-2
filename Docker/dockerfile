# Base image with PyTorch and CUDA
FROM pytorch/pytorch:2.3.1-cuda12.1-cudnn8-devel

# Arguments to build Docker Image
ARG USE_CUDA=0
ARG TORCH_ARCH="7.0;7.5;8.0;8.6"

# Environment variables
ENV AM_I_DOCKER=True \
    BUILD_WITH_CUDA="${USE_CUDA}" \
    TORCH_CUDA_ARCH_LIST="${TORCH_ARCH}" \
    CUDA_HOME=/usr/local/cuda-12.1/ \
    PATH=/usr/local/cuda-12.1/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64:${LD_LIBRARY_PATH} \
    ROS_DISTRO=humble \
    SHELL=/bin/bash \
    NB_USER=hrc \
    NB_UID=1000 \
    HOME=/home/hrc \
    DEBIAN_FRONTEND=noninteractive

# Set timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime

# Add user
RUN adduser --disabled-password --gecos "Default user" --uid ${NB_UID} ${NB_USER} && \
    echo "root:root" | chpasswd && \
    echo "${NB_USER}:111111" | chpasswd

# Install base packages
RUN apt-get update && apt-get install --no-install-recommends -y \
    wget ffmpeg=7:* libsm6=2:* libxext6=2:* git=1:* nano vim=2:* ninja-build \
    gcc-10 g++-10 ccache gdb gawk make python3-numpy python3-dev python3-pyparsing \
    python3-serial python-is-python3 libpython3-stdlib libtool-bin zip default-jre \
    socat tzdata pip dirmngr gnupg2 curl sudo cmake swig net-tools lsb-release \
    gnupg build-essential libcgal-dev libfftw3-dev rapidjson-dev pkg-config \
    libboost-system-dev libopencv-dev gstreamer1.0-plugins-bad gstreamer1.0-libav \
    gstreamer1.0-gl software-properties-common && \
    apt-get clean && apt-get autoremove && rm -rf /var/lib/apt/lists/*

# Set GCC/G++ to version 10
ENV CC=gcc-10
ENV CXX=g++-10

# Upgrade pip and install Python packages
RUN python3 -m pip install --upgrade pip setuptools wheel numpy scipy matplotlib \
    scikit-learn scikit-image pandas opencv-python opencv-python-headless \
    pyyaml pyquaternion pymavlink MAVProxy pyserial pexpect Pillow \
    tensorboard tensorflow future transformers supervision pycocotools \
    addict yapf timm

RUN apt-get update && apt-get install -y software-properties-common && \
    add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    apt-get update && apt-get install -y libstdc++6


# Install ROS Humble
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update && apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-desktop ros-${ROS_DISTRO}-ros2-control ros-${ROS_DISTRO}-ros2-controllers \
    ros-${ROS_DISTRO}-joy* ros-${ROS_DISTRO}-joint-state-publisher ros-${ROS_DISTRO}-rosbridge-server \
    ros-${ROS_DISTRO}-vision-msgs ros-${ROS_DISTRO}-ament-cmake ros-${ROS_DISTRO}-geometry-msgs \
    ros-${ROS_DISTRO}-std-msgs ros-${ROS_DISTRO}-sensor-msgs ros-${ROS_DISTRO}-tf2-msgs \
    ros-${ROS_DISTRO}-xacro ros-${ROS_DISTRO}-rviz-rendering ros-${ROS_DISTRO}-rcl-interfaces \
    ros-${ROS_DISTRO}-urdf ros-${ROS_DISTRO}-geographic-msgs ros-${ROS_DISTRO}-topic-tools \
    ros-dev-tools ros-${ROS_DISTRO}-launch-pytest ros-${ROS_DISTRO}-joint-state-publisher-gui \
    python3-colcon-common-extensions python3-rosdep && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Set ROS environment
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ${HOME}/.bashrc

# Create workspace for Grounded-SAM-2
RUN mkdir -p ${HOME}/Grounded-SAM-2
COPY . ${HOME}/Grounded-SAM-2/

WORKDIR ${HOME}/Grounded-SAM-2

# Install Grounded-SAM-2 dependencies
RUN python -m pip install -e . 


RUN python -m pip install --no-build-isolation -e grounding_dino

# Support NVIDIA Docker
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=all
